% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/df_pattern_subset.R
\name{df_pattern_locate}
\alias{df_pattern_locate}
\alias{df_pattern_subset}
\title{Subset a data frame given two patterns}
\usage{
df_pattern_locate(d, pattern, strategy = c("ul", "lr"))

df_pattern_subset(
  d,
  pattern_ul = NULL,
  pattern_lr = NULL,
  ignore_columns = FALSE,
  ignore_rows = FALSE,
  which_header = c("row above", "table header"),
  adjust_ul = c(0, 0),
  adjust_lr = c(0, 0)
)
}
\arguments{
\item{d}{a \code{data.frame}}

\item{pattern}{a \code{regex} pattern}

\item{strategy}{character specifying if upmost left ("ul") or lowermost right ("lr") occurrence
is to be sought.}

\item{pattern_ul}{\code{regex} pattern specifying upper left corner}

\item{pattern_lr}{\code{regex} pattern specifying lower left corner}

\item{ignore_columns}{logical; if \code{TRUE}, filtering of columns is omitted, irrespective of columns where patterns were found}

\item{ignore_rows}{logical; if \code{TRUE}, filtering of rows is omitted, irrespective of rows where patterns were found}

\item{which_header}{character, specifying if a new header based on the row above ("row above", default) the upper left corner
or if old table headers ("table header") be used}

\item{adjust_ul}{integer vector of length 2 specifying addends to row and column to determine upper left corner}

\item{adjust_lr}{integer vector of length 2 specifying addends to row and column to determine lower right corner}
}
\value{
\code{df_pattern_locate} returns an integer vector of length 2 (i.e. a tuple)
specifying row and column number, or \code{c(NA, NA)} if no occurrence of \code{pattern} found

\code{df_pattern_subset} returns a new \code{data.frame} extending from the upper left to the
lower right corner previously located (using \code{pattern_ul} and \code{pattern_lr}, respectively).
}
\description{
\code{df_pattern_locate} locates the up- and leftmost or lower- and rightmost occurrence of a
given pattern within a given \code{data.frame}.

\code{df_pattern_subset} returns a subset of a \code{data.frame} given two patterns, which correspond to
the upper left and lower right corner of the subset.
}
\examples{
# # load fantasy data from an excel file (generation of data see below):
# # fantasy <- read_xlsx(paste0(system.file("extdata", package = "kungfu"), "/fnts.xlsx"))
# fantasy_subset <- df_pattern_subset(fnts, "43", "^dun.*dun$")
#
# # locate pattern
# df_pattern_locate(fnts, "dunbumm", "ul")
# # returns c(3, 2)
#
# # generate fantasy excel file fnts.xlxs
# library(openxlsx)
# syllables <- c("arg", "ton", "hun", "kon", "dun", "bumm", "samm", "kur", "dem", "schim", "to")
# word <- function(s = syllables, range = c(1,3), clps = "") {
#   paste(sample(s, round(runif(1, min(range), max(range))), replace = TRUE), collapse = clps)
# }
# words <- function(n, ...) mapply(function(x) word(...), 1:n)
# set.seed(1)
# fnts <- data.frame(id = sample(1:200, 100),
#                    bumka = words(100),
#                    humka = words(100, range = c(3,6), clps = " "),
#                    group = sample(LETTERS, 100, replace = TRUE),
#                    groko = words(100, range = c(2,4), clps = ", "))
#
# write.xlsx(fnts, "../inst/extdata/fnts.xlsx", overwrite = TRUE)
}
\seealso{
\code{\link[=rbinder]{rbinder()}} for combining multiple csv-like files with identical headers; \code{df_pattern_subset} can be used to create
custom readers for \code{rbinder}.
}
