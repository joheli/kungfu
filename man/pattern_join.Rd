% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pattern_join.R
\name{pattern_join}
\alias{pattern_join}
\title{pattern_join}
\usage{
pattern_join(
  x,
  y,
  by,
  nomatch_label = NA,
  x_split_cutoff = 500,
  multicore = TRUE
)
}
\arguments{
\item{x}{the first \code{data.frame}}

\item{y}{the second \code{data.frame} containing a column with \emph{regex} patterns}

\item{by}{character of length 1, specifying either names of corresponding field names in a
named (e.g. \code{c("field name in x" = "field name containing patterns in y")}) or
unnamed (e.g. \code{"field name in both x and y"}; here, both \code{x} and \code{y} contain the same column name) character.}

\item{nomatch_label}{character or \code{NA}, specifying values joined to entries in \code{x} that do not
have corresponding match in \code{y}}

\item{x_split_cutoff}{integer specifying number of rows above which \code{x} is split into smaller
\code{data.frame} objects; this is necessary, as the joining algorithm cannot handle data.frames with
many thousand rows.}

\item{multicore}{logical specifying if multiple cores should be used or not; it defaults to \code{TRUE}, although
benefits in speed only arise if \code{nrow(x)} \emph{is substantially greater} than \code{x_split_cutoff}.}
}
\value{
\code{data.frame} of merged \code{x} and \code{y} based on found similarities columns specified by argument \code{by}.
}
\description{
Function to join two \code{data.frame} objects based on \emph{regex} patterns. The \emph{first} \code{data.frame}
contains a \emph{dirty} column (e.g. "real-world" data originating from a free text field) that needs grouping.
The \emph{second} \code{data.frame} maps its rows to above mentioned \emph{dirty} column using the unique patterns contained in
one of its own columns.
}
\examples{
# set seed to make it reproducible
set.seed(1)
# extract twenty rows of nycflights13::planes
airplanes <- nycflights13::planes \%>\% slice(sample(1:nrow(nycflights13::planes), 20))
# model_type is really just a stupid pattern map, please don't pay attention to the content.
model_type <- tibble(pattern = c("PA-32", "EMB-145", "7[2-8]7", "A320"),
                     model_type = c("Piper 32", "Embraer 145", "Boeing 7X7", "Airbus 320"))
# pattern_join 'airplanes' with 'model_type' by columns 'model' and 'pattern'
airplanes_model_type <- pattern_join(airplanes, model_type, c("model" = "pattern"))
}
